from scheme import Map, Sequence, Text
from bake import Task
from bake.path import path
from bake.util import get_package_data

class BuildDeb(Task):
    name = 'lattice.deb.build'
    description = 'builds a deb file of a built component'
    parameters = {
            'environ': Map(Text(nonnull=True), description='environment for the build'),
            'name': Text(description='name of the component to build', nonempty=True),
            'filepaths': Sequence(item=Text(nonnull=True),nonnull=True),
            'version': Text(description='version of the component to package', nonempty=True)
            }

    def run(self, runtime):
        environ = self['environ']
        self.buildroot = runtime.curdir
        self.tgzname = '%s-%s.tar.bz2' % (self['name'], self['version'])
        self.pkgname = '%s-%s.deb' % (self['name'], self['version'])
        self.distpath = runtime.curdir / 'dist'
        self.workpath = runtime.curdir / 'build_deb' / self['name']
        self.workpath.makedirs_p()

        controldir = self.workpath / 'DEBIAN'
        controldir.mkdir_p()

        controlfile = get_package_data('lattice', 'templates/deb-control-file.tmpl') % ({'component_name': self['name'],
            'component_version': self['version'],
            'component_maintainer_name': 'SIQ',
            'component_maintainer_email': 'acolichia@storediq.com',
            'component_depends': '',
            'component_description': 'Package generated by lattice.deb.build'})
        path('%s/control' % str(controldir)).write_bytes(controlfile)

        runtime.chdir(str(self.workpath))
        self._run_tar(runtime, environ)
        runtime.chdir(runtime.curdir[:-len(self['name'])])
        self._run_dpkg(runtime, environ)

    def _run_tar(self, runtime, environ):
        shellargs = ['tar', '-xvjf', str(self.distpath / self.tgzname)]
        runtime.shell(shellargs, environ=environ, merge_output=True)

    def _run_dpkg(self, runtime, environ):
        shellargs = ['dpkg', '-b', str(self.workpath), str(self.distpath / self.pkgname)]
        runtime.shell(shellargs, environ=environ, merge_output=True)


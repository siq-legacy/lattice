from scheme import Map, Text
from bake import Task
from bake.path import path
from bake.util import get_package_data

from lattice.tasks.component import ComponentTask

class BuildDeb(ComponentTask):
    name = 'lattice.deb.build'
    description = 'builds a deb file of a built component'

    def run(self, runtime):
        component = self.component
        self.buildroot = runtime.curdir
        self.tgzname = '%s-%s.tar.bz2' % (component['name'], component['version'])
        self.pkgname = '%s-%s.deb' % (component['name'], component['version'])
        self.distpath = runtime.curdir / 'dist'
        self.workpath = runtime.curdir / 'build_deb' / self['name']
        self.workpath.makedirs_p()

        controldir = self.workpath / 'DEBIAN'
        controldir.mkdir_p()

        template = get_package_data('lattice', 'templates/deb-control-file.tmpl')
        controlfile = template % {
            'component_name': component['name'],
            'component_version': component['version'],
            'component_maintainer_name': 'SIQ',
            'component_maintainer_email': 'acolichia@storediq.com',
            'component_depends': '',
            'component_description': 'Package generated by lattice.deb.build'}
        path('%s/control' % str(controldir)).write_bytes(controlfile)

        runtime.chdir(str(self.workpath))
        self._run_tar(runtime, environ)
        runtime.chdir(runtime.curdir[:-len(self['name'])])
        self._run_dpkg(runtime, environ)

    def _run_tar(self, runtime):
        shellargs = ['tar', '-xvjf', str(self.distpath / self.tgzname)]
        runtime.shell(shellargs, merge_output=True)

    def _run_dpkg(self, runtime):
        shellargs = ['dpkg', '-b', str(self.workpath), str(self.distpath / self.pkgname)]
        runtime.shell(shellargs, merge_output=True)


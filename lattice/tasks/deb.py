from bake import *
from bake.util import get_package_data
from scheme import Text

from lattice.tasks.component import ComponentTask

class BuildDeb(ComponentTask):
    name = 'lattice.deb.build'
    description = 'builds a deb file of a built component'
    parameters = {
        'cachedir': Path(nonnull=True),
        'distpath': Path(nonempty=True),
        'prefix': Text(nonnull=True),
    }

    def run(self, runtime):
        component = self.component
        name = component['name']
        version = component['version']

        prefix = self['prefix']
        if prefix:
            name = '%s-%s' % (prefix.strip('-'), name)

        self.buildroot = runtime.curdir
        self.tgzname = '%s-%s.tar.bz2' % (component['name'], version)
        self.pkgname = '%s-%s.deb' % (name, version)

        self.workpath = runtime.curdir / ('build_%s_deb' % name)
        self.workpath.makedirs_p()

        controldir = self.workpath / 'DEBIAN'
        controldir.mkdir_p()

        template = get_package_data('lattice', 'templates/deb-control-file.tmpl')
        controlfile = template % {
            'component_name': name,
            'component_version': version,
            'component_maintainer_name': 'SIQ',
            'component_maintainer_email': 'acolichia@storediq.com',
            'component_depends': '',
            'component_description': 'Package generated by lattice.deb.build'}
        
        path('%s/control' % str(controldir)).write_bytes(controlfile)

        if 'pre-install' in self.build:
            script = path(self.build['pre-install'])
            if script.exists():
                script.copy2(str(controldir / 'preinst'))
        
        if 'post-install' in self.build:
            script = path(self.build['post-install'])
            if script.exists():
                script.copy2(str(controldir / 'postinst'))

        curdir = runtime.chdir(self.workpath)
        self._run_tar(runtime)

        runtime.chdir(curdir)
        self._run_dpkg(runtime)

    def _run_tar(self, runtime):
        shellargs = ['tar', '-xvjf', str(self['distpath'] / self.tgzname)]
        runtime.shell(shellargs, merge_output=True)

    def _run_dpkg(self, runtime):
        pkgpath = self['distpath'] / self.pkgname
        runtime.shell(['dpkg', '-b', str(self.workpath), str(pkgpath)], merge_output=True)

        cachedir = self['cachedir']
        if cachedir:
            pkgpath.copy2(cachedir)
